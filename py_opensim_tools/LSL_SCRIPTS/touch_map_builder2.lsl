// TouchST Map List Example - v1.0
// Author: Warin Cascabel
//
// Simple example of using "buttons" on a prim's texture.

// Replace the following ButtonCoords list with one generated by the TouchST Map List Builder script.  It consists of pairs of coordinates
// defining the minimum and maximum point coordinates for each button.
list ButtonCoords = [ <0.040404,0.572013,0.000000>, <0.445333,0.714434,0.000000>, <0.040740,0.324040,0.000000>, <0.445979,0.468508,0.000000>,
                      <0.040887,0.079658,0.000000>, <0.446032,0.222644,0.000000>, <0.548612,0.572047,0.000000>, <0.952732,0.714478,0.000000>,
                      <0.548699,0.324969,0.000000>, <0.953914,0.468322,0.000000>, <0.549857,0.079893,0.000000>, <0.953868,0.223173,0.000000> ];

// The FindButton() function takes a vector, and sees if it falls within any of the pairs of coordinates in
// the ButtonCoords list. If so, it returns the zero-based index (0 for the first pair, 1 for the second pair,
// etc.), or -1 if the coordinate did not fall within any of the pairs in the list.
//
integer FindButton( vector v )
{
    integer j = llGetListLength( ButtonCoords );        // How many buttons?
    integer i;
    for (i = 0; i < j; i += 2)                          // Scan through the list
    {
        vector s = llList2Vector( ButtonCoords, i );    // Get the starting point of the rectangle
        vector e = llList2Vector( ButtonCoords, i+1 );  // Get the ending point of the rectangle
                                                        // If the provided point falls within the rectangle, return
                                                        // the number of the pair
        if ((v.x >= s.x) && (v.x <= e.x) && (v.y >= s.y) && (v.y <= e.y)) return (i >> 1);
    }
    return -1;                                          // If we reached here, the point fell outside all the rectangles
}                                                       // so return -1 to indicate "not found".

default
{
    touch_start( integer foo )
    {
        while (foo--)                                           // For each person who touched us:
        {
            key k = llDetectedKey( foo );                       // Get the UUID of the person who clicked us
            integer face = llDetectedTouchFace( foo );          // Get the face where they clicked. We could use this information
                                                                //   to ignore the touch if it wasn't on the correct face, or
                                                                //   check a different list depending on which face was clicked
                                                                //   but for this example script we don't actually do anything
                                                                //   with the information.
                                                                
            integer i = FindButton( llDetectedTouchST( foo ));  // Get the coordinate where they clicked; see if it's a button
            if (i != -1)                                        // If so, tell them what button they clicked (but of course we
            {                                                   // could do so much more with this information).
                llInstantMessage( k, "You clicked button number " + (string) i );
            }
            else                                                // If they did not click on a button...
            {
                llInstantMessage( k, "Good work. You missed all the buttons." ); // ...print a message saying so.
            }
        }
    }
}